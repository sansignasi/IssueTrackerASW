swagger: '2.0'

# This is your document metadata
info:
  version: 1.0.0
  title: IssueTrackerASW
host: secure-crag-93015.herokuapp.com

securityDefinitions:
   APIKey:
     #
     type: apiKey
     in: query
     name: token
     
security:
  - APIKey: []
  
# Describe your paths here
paths:
  /issues:
    get:
      tags:
        - Issues
      description: Obtener Issue objeto.
      produces:
        - application/json
      parameters:
        - in: query
          name: type
          description: Obtener Issue objeto por type.
          required: false
          type: string
          enum:
            - bug
            - enhancement
            - proposal
            - task
        - in: query
          name: priority
          description: Obtener Issue objeto por priority.
          required: false
          type: string
          enum:
            - trivial
            - minor
            - major
            - critical
            - blocker
        - in: query
          name: status
          description: Obtener Issue objeto por status.
          required: false
          type: string
          enum:
            - new
            - open
            - on hold
            - resolved
            - duplicate
            - invalid
            - won't fix
            - closed
      responses:
        '200':
          description: success
          schema:
            title: ArrayOfIssues
            type: array
            items:
              $ref: '#/definitions/Issue'
    post:
      tags:
        - Issues
      description: Crear una nueva Issue. 
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: Title
          type: string
          description: Título de la Issue.
          required: true
        - in: formData
          name: Description
          type: string
          description: Descripción de la Issue.
        - in: formData
          name: Priority
          type: string
          description: Prioridad de la Issue.
          required: true
          enum:
            - trivial
            - minor
            - major
            - critical
            - blocker
        - in: formData
          name: Type
          type: string
          description: Tipo de Issue.
          required: true
          enum:
            - bug
            - enhancement
            - proposal
            - task
        - in: formData
          name: Asigned
          type: integer
          description: Persona la cual se le asignado la Issue.
      responses:
        '201':
          description: Creada
          schema:
            $ref: '#/definitions/Issue'
        '422':
          description: Not authorization.
          schema:
            type: object
            properties:
              error:
                example: User no registrado.
  '/issues/{id}':
    get:
      tags:
        - Issues
      description: Obtener Issue identificada por id.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: Identificador de la issue
          required: true
          type: integer
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/Issue'
        '404':
          $ref: '#/responses/NotFound'
    delete:
      tags:
        - Issues
      description: Eliminar una issue
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: Identificador de la issue 
          required: true
          type: integer
      responses:
        '200':
          description: success
          schema:
            type: object
            properties:
              message:
                example: success
        '422':
          description: Not authorization.
          schema:
            type: object
            properties:
              error:
                example: User no registrado.
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Issues
      description: Actualizar la issue
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: Identificador de la issue
          required: true
        - in: formData
          name: Title
          type: string
          description: Título de la issue
          required: true
        - in: formData
          name: Description
          type: string
          description: Descripción de la issue
        - in: formData
          name: Status
          type: string
          description: Estado de la issue
          required: true
          enum:
            - new
            - open
            - on hold
            - resolved
            - duplicate
            - invalid
            - won't fix
            - closed
        - in: formData
          name: Priority
          type: string
          description: Prioridad de la issue
          required: true
          enum:
            - trivial
            - minor
            - major
            - critical
            - blocker
        - in: formData
          name: Type
          type: string
          description: Tipo de issue
          required: true
          enum:
            - bug
            - enhancement
            - proposal
            - task
        - in: formData
          name: Asigned
          type: string
          description: Persona la cual se le ha asignado la issue
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/Issue'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Not authorization.
          schema:
            type: object
            properties:
              error:
                example: User no registrado.
  '/issues/{issue_id}/comments':
    get:
      tags:
        - Comments
      description: Obtener los comentarios de una issue
      produces:
        - application/json
      parameters:
        - in: path
          name: issue_id
          description: Identificador de la issue
          required: true
          type: integer
      responses:
        '200':
          description: success
          schema:
            title: ArrayOfComments
            type: array
            items:
              $ref: '#/definitions/Comment'
        '422':
          description: Not authorization.
          schema:
            type: object
            properties:
              error:
                example: User no registrado.
        '404':
          $ref: '#/responses/NotFound'
    post:
      tags:
        - Comments
      description: Crea un nuevo comentario para la issue
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: path
          name: issue_id
          description: Identificador de la issue
          required: true
          type: integer
        - in: formData
          name: body
          type: string
          description: Contenido del comentario
      responses:
        '201':
          description: Creado
          schema:
            $ref: '#/definitions/Comment'
        '404':
          $ref: '#/responses/NotFound'
  '/issues/{issue_id}/comments/{comment_id}':
    get:
      tags:
        - Comments
      description: Obtener un comentario de una issue
      produces:
        - application/json
      parameters:
        - in: path
          name: issue_id
          description: Identificador de una Issue
          required: true
          type: integer
        - in: path
          name: comment_id
          description: Identificador del comentario
          required: true
          type: integer
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/Comment'
        '404':
          $ref: '#/responses/NotFound'
    
    delete:
      tags:
        - Comments
      description: Eliminar un comentario
      produces:
        - application/json
      parameters:
        - in: path
          name: issue_id
          description: Identificador de la issue
          required: true
          type: integer
        - in: path
          name: comment_id
          description: Identificador del comentario
          required: true
          type: integer
      responses:
        '200':
          description: success
          schema:
            type: object
            properties:
              message:
                example: success
        '422':
          description: Not authorization.
          schema:
            type: object
            properties:
              error:
                example: User no registrado.
        '404':
          $ref: '#/responses/NotFound'
  '/issues/{issue_id}/attachment':
    get:
      tags:
        - Attachments
      description: Obtener el attachment de la issue
      produces:
        - application/json
      parameters:
        - in: path
          name: issue_id
          description: Identificador de la issue
          required: true
          type: integer
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/Attachment'
        '404':
          $ref: '#/responses/NotFound'
    post:
      tags:
        - Attachments
      description: Crear un attachment para una issue
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: issue_id
          description: Identificador de la issue
          required: true
          type: integer
        - in: formData
          name: file
          description: Archivo que utilizaremos para hacer el attachment
          type: file
          required: true
      responses:
        '201':
          description: Attachment creado
          schema:
            $ref: '#/definitions/Attachment'
        '422':
          description: Not authorization.
          schema:
            type: object
            properties:
              error:
                example: User no registrado.
        '404':
          $ref: '#/responses/NotFound'
 
  '/issues/{issue_id}/like':
    post:
      tags:
        - Issues
      description: >-
       
        Votes or unvotes de las  issues con el ID issue_id como el current user autentificado
      parameters:
        - in: path
          name: issue_id
          description: ID de las issue para vote/unvote
          required: true
          type: integer
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/Issue'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Not authorization.
          schema:
            type: object
            properties:
              error:
                example: User no registrado.
  
  '/issues/{issue_id}/dislike':
    post:
      tags:
        - Issues
      description: >-
       
        Votes or unvotes de las  issues con el ID issue_id como el current user autentificado
      parameters:
        - in: path
          name: issue_id
          description: ID de las issue para vote/unvote
          required: true
          type: integer
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/Issue'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Not authorization.
          schema:
            type: object
            properties:
              error:
                example: User no registrado.
          
          
  '/issues/{issue_id}/watch':
    post:
      tags:
        - Issues
      description: >-
        Watch/unwatch de las issue con la ID issue_id como el current user
  
      parameters:
        - in: path
          name: issue_id
          description: ID de las issue de watch/unwatch
          required: true
          type: integer
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/Issue'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Not authorization.
          schema:
            type: object
            properties:
              error:
                example: User no registrado.
          
  '/issues/{issue_id}/unwatch':
    post:
      tags:
        - Issues
      description: >-
        Watch/unwatch de las issue con la ID issue_id como el current user
  
      parameters:
        - in: path
          name: issue_id
          description: ID de las issue de watch/unwatch
          required: true
          type: integer
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/Issue'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Not authorization.
          schema:
            type: object
            properties:
              error:
                example: User no registrado.
          
  

  /users:
    get:
      tags:
        - Users
      description: Obtener los usuarios .
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            title: ArrayOfUsers
            type: array
            items:
              $ref: '#/definitions/User'
  '/users/{id}':
    get:
      tags:
        - Users
      description: Obtener user por id
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID del user
          required: true
          type: integer
      responses:
        '200':
          $ref: '#/definitions/User'
        '404':
          $ref: '#/responses/NotFound'
responses:
  NotFound:
    description: Objecto no encontrado
    schema:
      type: object
      properties:
        error:
          example: Not Found
definitions:
  Issue:
    type: object
    properties:
      id:
        type: integer
        example: 2
      Title:
        type: string
        example: No funciona attachment
      Description:
        type: string
        example: description
      Type:
        type: string
        example: Bug
      Priority:
        type: string
        example: Critical
      Status:
        type: string
        example: New
      Votes:
        type: integer
        example: 1
      Watch:
        type: integer
        example: 1
      Asigned:
        type: string
        example: 1
      created_at:
        type: string
        format: date
        example: '2019-06-07T18:28:01.933Z'
      updated_at:
        type: string
        format: date
        example: '2019-06-07T18:28:02.933Z'

  Comment:
    type: object
    properties:
      id:
        type: string
        example: 1
      body:
        type: string
        example: body del comentario
      issue_id:
        type: string
        example: 1
      user_id:
        type: string
        example: 1  
      created_at:
        type: string
        format: date
        example: '2019-06-25T12:18:04.876Z'
      updated_at:
        type: string
        format: date
        example: '2019-06-25T12:18:04.876Z'
     
  Attachment:
    type: object
    properties:
      attachment_content_type:
        type: string
        example: image/jpeg
      attachment_file_name:
        type: string
        example: image.jpg
      attachment_file_size:
        type: integer
        example: 2673366
      attachment_updated_at:
        type: string
        format: date
        example: '2019-12-04T10:22:10.641Z'
      url:
        type: string
        example: 'http://example.com/image.jpg'
    
  User:
    type: object
    properties:
      id:
        type: integer
        example: 1
      first_name:
        type: string
        example: Pablo Iniesta
      email:
        type: string
        example: pabloiniestabdn@gmail.com
      uid:
        type: string
        example: 114029767620150288445
      token:
        type: string
        example: asw_Y6G4U7_MkS8XYAq-yByxpA
